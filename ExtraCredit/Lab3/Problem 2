isPrime(n): 
  for(i = 2, i*i <= n; i++) {
    if(n % i == 0) {
      return false
    }
  return true

1. Best Case: The time complexity is O(1), if n is <= 3 then the loop won't be executed at all due to 
i = 2, i*i <= n in the for loop. For example, if n is 3 (4 <= 3), in this case, it will immediately just return true.


2. Worst Case: The time complexity is O(n^0.5), this happens when n is a prime number. The for loop will check all of the
potential divisors up to square root n, prime numbers doesn't have divisors other than 1 and the number itself.


3. Average Case: The time complexity is O(n^0.5), this happens when n is a random number. Prime density decreases when numbers get
too big, so it may take longer to find divisors, it will still check all of the potential diviors up to square root n just like 
in the worst case.
